// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cage1016/ms-sample/internal/app/tictac/service (interfaces: TictacService)

// Package automocks is a generated GoMock package.
package automocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTictacService is a mock of TictacService interface
type MockTictacService struct {
	ctrl     *gomock.Controller
	recorder *MockTictacServiceMockRecorder
}

// MockTictacServiceMockRecorder is the mock recorder for MockTictacService
type MockTictacServiceMockRecorder struct {
	mock *MockTictacService
}

// NewMockTictacService creates a new mock instance
func NewMockTictacService(ctrl *gomock.Controller) *MockTictacService {
	mock := &MockTictacService{ctrl: ctrl}
	mock.recorder = &MockTictacServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTictacService) EXPECT() *MockTictacServiceMockRecorder {
	return m.recorder
}

// Tac mocks base method
func (m *MockTictacService) Tac(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tac", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tac indicates an expected call of Tac
func (mr *MockTictacServiceMockRecorder) Tac(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tac", reflect.TypeOf((*MockTictacService)(nil).Tac), arg0)
}

// Tic mocks base method
func (m *MockTictacService) Tic(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tic", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tic indicates an expected call of Tic
func (mr *MockTictacServiceMockRecorder) Tic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tic", reflect.TypeOf((*MockTictacService)(nil).Tic), arg0)
}
